@startuml


participant MR
participant EIS
participant "openssl-engine-ks"
participant KS
participant CS
participant Module


group Master encryption key
	MR -> KS ++: create_key_if_not_exists("master")
	return OK("key handle")
end

group Device CA
	MR -> KS ++: load_key_pair("device_ca")
	return OK("key handle")
	MR -> "openssl-engine-ks" ++: load_private_key("key handle")
	return openssl::EVP_PKEY
	MR -> CS ++: create_or_load_cert("device_ca")
	return OK(cert PEM)
end


group Workload CA
	MR -> KS ++: create_key_pair_if_not_exists("workload_ca")
	return OK("key handle")
	MR -> "openssl-engine-ks" ++: load_private_key("key handle")
	return openssl::EVP_PKEY
	MR -> CS ++: create_or_load_cert("workload_ca")
	return OK(cert PEM) or Err(NOT_FOUND)

	alt if OK(cert PEM)
		MR -> "openssl-engine-ks" ++: openssl::X509_verify(CSR, device_ca privkey openssl::EVP_PKEY)
		"openssl-engine-ks" -> KS ++: sign("key handle", ...)
		return OK(signature)
		return OK(signed X509)
		MR -> CS ++: import("workload_ca", cert PEM)
		return OK

	else if Err(NOT_FOUND)
		MR -> MR: generate new CSR for workload_ca
		MR -> "openssl-engine-ks" ++: openssl::X509_sign(CSR, device_ca privkey openssl::EVP_PKEY)
		"openssl-engine-ks" -> KS ++: sign("key handle", ...)
		return OK(signature)
		return OK(signed X509)
		MR -> CS ++: import("workload_ca", cert PEM)
		return OK
	end
end


group MR init
	MR -> EIS ++: get_provisioning_info()
	return OK(provisioning info)

	MR -> MR: Start modules
	MR -> Module **
end


group Module things
	group Module wants to encrypt a secret
		Module -> MR ++: encrypt(plaintext)
		MR -> EIS ++: encrypt(plaintext)
		EIS -> EIS: Derive module ID plaintext
		EIS -> KS ++: encrypt("master encryption key handle", module ID plaintext)
		return OK(module ID ciphertext)
		EIS -> EIS: encrypt(plaintext, module ID ciphertext)
		return OK(ciphertext)
		return OK(ciphertext)
	end

	group Module wants to sign (HMAC-SHA256) a digest
		Module -> MR ++: sign(digest)
		MR -> EIS ++: sign(digest)
		EIS -> EIS: Derive module ID plaintext
		EIS -> KS ++: encrypt("master encryption key handle", module ID plaintext)
		return OK(module ID ciphertext)
		EIS -> EIS: sign(plaintext, module ID ciphertext)
		return OK(signature)
		return OK(signature)
	end

	group Module wants a server cert
		Module -> MR ++: Request server cert
		MR -> EIS ++: Request server cert
		EIS -> EIS: generate new privkey and CSR (in memory, not via openssl-engine-ks)
		EIS -> "openssl-engine-ks" ++: openssl::X509_sign(CSR, workload_ca privkey openssl::EVP_PKEY)
		"openssl-engine-ks" -> KS ++: sign("key handle", ...)
		return OK(signature)
		return OK(signed X509)
		return OK(privkey, server cert)
		return OK(privkey, server cert)
	end
end


@enduml
